Parameters:
  LatestAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64

  InstanceType:
    Type: String
    Default: t3.medium

  SecretName:
    Type: String
    Default: vscode-password
    Description: The name of the secrets manager secret that stores the password to be used for the VSCode Server. The password must be a simple plaintext string with no JSON.

Mappings:
  Prefixes:
    ap-northeast-1:
      PrefixList: pl-58a04531
    ap-northeast-2:
      PrefixList: pl-22a6434b
    ap-south-1:
      PrefixList: pl-9aa247f3
    ap-southeast-1:
      PrefixList: pl-31a34658
    ap-southeast-2:
      PrefixList: pl-b8a742d1
    ca-central-1:
      PrefixList: pl-38a64351
    eu-central-1:
      PrefixList: pl-a3a144ca
    eu-north-1:
      PrefixList: pl-fab65393
    eu-west-1:
      PrefixList: pl-4fa04526
    eu-west-2:
      PrefixList: pl-93a247fa
    eu-west-3:
      PrefixList: pl-75b1541c
    sa-east-1:
      PrefixList: pl-5da64334
    us-east-1:
      PrefixList: pl-3b927c52
    us-east-2:
      PrefixList: pl-b6a144df
    us-west-1:
      PrefixList: pl-4ea04527
    us-west-2:
      PrefixList: pl-82a045eb

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: vscode-server-isg
      SecurityGroupIngress:
        - Description: Allow HTTP from com.amazonaws.global.cloudfront.origin-facing
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourcePrefixListId: !FindInMap
            - Prefixes
            - !Ref AWS::Region
            - PrefixList
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: vscode-server-isg
      VpcId: !Ref NetworkVPC

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: vscode-server-instance

  InstanceRolePolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2messages:*
              - ssm:UpdateInstanceInformation
              - ssmmessages:*
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource: '*'
        Version: "2012-10-17"
      PolicyName: InstanceRolePolicy
      RoleName: !Ref InstanceRole

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  Server:
    Type: AWS::EC2::Instance
    DependsOn:
      - InstanceRolePolicy
      - InstanceRole
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 128
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref LatestAMI
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt InstanceSecurityGroup.GroupId
      SubnetId: !GetAtt NetworkPublicSubnet1.SubnetId
      Tags:
        - Key: Name
          Value: vscode-server
      UserData: !Base64
        Fn::Sub: "#!/bin/bash\n\nset -eoux pipefail\n\nlocal_ip=$(ec2-metadata | grep \"^local-ipv4: \" | cut -d \" \" -f 2)\necho \"local_ip:$local_ip\"\n\n# Install the latest code-server from coder.com (not from yum)\nexport HOME=/root \ncurl -fsSL https://code-server.dev/install.sh | bash\n\nyum install -y argon2\ntee /etc/systemd/system/code-server.service <<EOF\n[Unit]\nDescription=Start code server\n\n[Service]\nExecStart=/usr/bin/code-server --port 8080 --host $local_ip\nRestart=always\nType=simple\nUser=ec2-user\n\n[Install]\nWantedBy = multi-user.target\nEOF\n\n# Get the password from secrets manager\nsecret_string=$(aws secretsmanager get-secret-value --secret-id ${SecretName} | jq -r \".SecretString\")\necho \"secret_string: $secret_string\"\n\n# Hash the password\nhashed_password=$(echo -n $secret_string | argon2 saltiness -e)\necho \"hashed_password: $hashed_password\"\n\n#TODO: Stop echoing the password\n\n# Install Node.js and save the code-server config file\nsudo -u ec2-user -i <<EOF\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\nsource .bashrc\nnvm install 20.11.0\nnvm use 20.11.0\nmkdir -p /home/ec2-user/.config/code-server\nsudo tee /home/ec2-user/.config/code-server/config.yaml <<ENDCONFIG\ncert: false\nauth: password\nhashed-password: ${hashed_password}\nuser-data-dir: /home/ec2-user\nENDCONFIG\nEOF\n\nsystemctl daemon-reload\nsystemctl enable --now code-server"

  CachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        Name: vscode-server
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: all
          EnableAcceptEncodingGzip: False
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Accept-Charset
              - Authorization
              - Origin
              - Accept
              - Referer
              - Host
              - Accept-Language
              - Accept-Encoding
              - Accept-Datetime
          QueryStringsConfig:
            QueryStringBehavior: all

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      Tags:
        - Key: Name
          Value: vscode-server
        - Key: Description
          Value: Distribution for EC2 VSCode Server
      DistributionConfig:
        Enabled: True
        HttpVersion: http2
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            Compress: False
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
            TargetOriginId: !Sub CloudFront-${AWS::StackName}
            ViewerProtocolPolicy: allow-all
            PathPattern: /proxy/*
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          CachePolicyId: !Ref CachePolicy
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
          TargetOriginId: !Sub CloudFront-${AWS::StackName}
          ViewerProtocolPolicy: allow-all
        Origins:
          - DomainName: !GetAtt Server.PublicDnsName
            Id: !Sub CloudFront-${AWS::StackName}
            CustomOriginConfig:
              HttpPort: 8080
              OriginProtocolPolicy: http-only

  NetworkVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: vscode-server

  NetworkPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      VpcId: !Ref NetworkVPC
      Tags:
        - Key: Name
          Value: vscode-server-public-subnet-1
    Metadata:
      guard:
        SuppressedRules:
          - SUBNET_AUTO_ASSIGN_PUBLIC_IP_DISABLED

  NetworkPublicSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NetworkVPC
      Tags:
        - Key: Name
          Value: vscode-server-public-subnet-1-rt

  NetworkPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NetworkPublicSubnet1RouteTable
      SubnetId: !Ref NetworkPublicSubnet1

  NetworkPublicSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NetworkInternetGateway
      RouteTableId: !Ref NetworkPublicSubnet1RouteTable
    Metadata:
      guard:
        SuppressedRules:
          - NO_UNRESTRICTED_ROUTE_TO_IGW
    DependsOn:
      - NetworkVPCGW

  NetworkPublicSubnet1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: vscode-server-public-subnet-1-eip

  NetworkPublicSubnet1NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NetworkPublicSubnet1EIP.AllocationId
      SubnetId: !Ref NetworkPublicSubnet1
      Tags:
        - Key: Name
          Value: vscode-server-public-subnet-1-ngw
    DependsOn:
      - NetworkPublicSubnet1DefaultRoute
      - NetworkPublicSubnet1RouteTableAssociation

  NetworkPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      VpcId: !Ref NetworkVPC
      Tags:
        - Key: Name
          Value: vscode-server-public-subnet-2
    Metadata:
      guard:
        SuppressedRules:
          - SUBNET_AUTO_ASSIGN_PUBLIC_IP_DISABLED

  NetworkPublicSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NetworkVPC
      Tags:
        - Key: Name
          Value: vscode-server-public-subnet-2-rt

  NetworkPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NetworkPublicSubnet2RouteTable
      SubnetId: !Ref NetworkPublicSubnet2

  NetworkPublicSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NetworkInternetGateway
      RouteTableId: !Ref NetworkPublicSubnet2RouteTable
    Metadata:
      guard:
        SuppressedRules:
          - NO_UNRESTRICTED_ROUTE_TO_IGW
    DependsOn:
      - NetworkVPCGW

  NetworkPublicSubnet2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: vscode-server-public-subnet-eip

  NetworkPublicSubnet2NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NetworkPublicSubnet2EIP.AllocationId
      SubnetId: !Ref NetworkPublicSubnet2
      Tags:
        - Key: Name
          Value: vscode-server-public-subnet-ngw
    DependsOn:
      - NetworkPublicSubnet2DefaultRoute
      - NetworkPublicSubnet2RouteTableAssociation

  NetworkPrivateSubnet1Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
      VpcId: !Ref NetworkVPC
      Tags:
        - Key: Name
          Value: vscode-server-private-subnet-1

  NetworkPrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NetworkVPC
      Tags:
        - Key: Name
          Value: vscode-server-private-subnet-1-rt

  NetworkPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NetworkPrivateSubnet1RouteTable
      SubnetId: !Ref NetworkPrivateSubnet1Subnet

  NetworkPrivateSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NetworkPublicSubnet1NATGateway
      RouteTableId: !Ref NetworkPrivateSubnet1RouteTable

  NetworkPrivateSubnet2Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.192.0/18
      MapPublicIpOnLaunch: false
      VpcId: !Ref NetworkVPC
      Tags:
        - Key: Name
          Value: vscode-server-private-subnet-2

  NetworkPrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NetworkVPC
      Tags:
        - Key: Name
          Value: vscode-server-private-subnet-2-rt

  NetworkPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NetworkPrivateSubnet2RouteTable
      SubnetId: !Ref NetworkPrivateSubnet2Subnet

  NetworkPrivateSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NetworkPublicSubnet2NATGateway
      RouteTableId: !Ref NetworkPrivateSubnet2RouteTable

  NetworkInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: vscode-server

  NetworkVPCGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref NetworkInternetGateway
      VpcId: !Ref NetworkVPC

Outputs:
  URL:
    Value: !Sub https://${Distribution.DomainName}/?folder=/home/ec2-user

