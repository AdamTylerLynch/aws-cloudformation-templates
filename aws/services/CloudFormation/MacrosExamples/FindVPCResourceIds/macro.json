{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This CloudFormation template is to provision the CloudFormation macro that find supported VPC ResourceId(s) by tags 1. Lambda Execution role is created. 2. Lambda is created that implements the macro logic. 3. Macro is created that uses the Lambda\n",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Project Configuration"
                    },
                    "Parameters": [
                        "pProject",
                        "pEnv"
                    ]
                }
            ],
            "ParameterLabels": {
                "pProject": {
                    "default": "Project name"
                },
                "pEnv": {
                    "default": "Environment"
                }
            }
        }
    },
    "Parameters": {
        "pProject": {
            "Description": "The project name e.g. myp.",
            "Type": "String",
            "Default": "myp"
        },
        "pEnv": {
            "Description": "The environment identifier e.g. dev",
            "Type": "String",
            "Default": "dev"
        }
    },
    "Resources": {
        "rMacroLambdaExecRole": {
            "Type": "AWS::IAM::Role",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W28",
                            "reason": "Role Name is used for identification, it is OK to replace"
                        },
                        {
                            "id": "W11",
                            "reason": "Only 'Describe*' is allowed"
                        }
                    ]
                }
            },
            "Properties": {
                "RoleName": {
                    "Fn::Sub": "cfn-macro-find-vpc-resource-exec-role-${pProject}-${pEnv}"
                },
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "lambda-cw-access",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Sid": "LambdaAccessForCWLogGroup",
                                    "Effect": "Allow",
                                    "Action": "logs:CreateLogGroup",
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
                                    }
                                },
                                {
                                    "Sid": "LambdaAccessForCWLogs",
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "lambda-ec2-access",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Sid": "LambdaEC2Access",
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:Describe*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": {
                            "Ref": "pProject"
                        }
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "pEnv"
                        }
                    },
                    {
                        "Key": "CreatedBy",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "rFindVPCResourceIdsFunction": {
            "Type": "AWS::Lambda::Function",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W89",
                            "reason": "VPC Access not required"
                        },
                        {
                            "id": "W58",
                            "reason": "Permission to write CloudWatch logs is provided via execution role in security template"
                        }
                    ]
                }
            },
            "Properties": {
                "Description": "Find supported VPCResource(s) Id(s) by tags",
                "FunctionName": {
                    "Fn::Sub": "cfn-macro-find-vpc-resource-${pProject}-${pEnv}"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "rMacroLambdaExecRole",
                        "Arn"
                    ]
                },
                "Timeout": 120,
                "Runtime": "python3.9",
                "ReservedConcurrentExecutions": 2,
                "Code": {
                    "ZipFile": "import json\nimport boto3\n\nvpc_client = boto3.client('ec2')\n\ndef handle_filters(params):\n    filters = []\n    for k in params :\n        filters.append(\n            {\n                \"Name\": f\"tag:{k}\",\n                \"Values\": [ str(params[k]) ]\n            }\n        )\n    return filters\n\ndef find_vpc_id(params):\n    result = \"\"\n    #Search for VPC\n    try:\n        filters = handle_filters(params)\n        vpcs = vpc_client.describe_vpcs( Filters=filters, MaxResults=5 )\n        if len(vpcs[\"Vpcs\"]) > 0 :\n            result = vpcs[\"Vpcs\"][0][\"VpcId\"]\n    except Exception as e:\n        print( str(e) )\n    return result\n\ndef find_subnet_ids(vpc_id, params):\n    result = []\n    #Search for SubnetIds\n    try:\n        filters = handle_filters(params)\n        filters.append(\n            {\n                \"Name\": \"vpc-id\",\n                \"Values\": [ vpc_id ]\n            }\n        )\n\n        subnets = vpc_client.describe_subnets( Filters=filters, MaxResults=6 )\n        for subnet in subnets[\"Subnets\"]:\n            result.append(subnet[\"SubnetId\"])\n    except Exception as e:\n        print( str(e) )\n    return result\n\ndef find_sg_ids(vpc_id, params):\n    result = []\n    #Search for SecurityGroupIds\n    try:\n        filters = handle_filters(params)\n        filters.append(\n            {\n                \"Name\": \"vpc-id\",\n                \"Values\": [ vpc_id ]\n            }\n        )\n\n        sgs = vpc_client.describe_security_groups( Filters=filters, MaxResults=6 )\n        for sg in sgs[\"SecurityGroups\"]:\n            result.append(sg[\"GroupId\"])\n    except Exception as e:\n        print( str(e) )\n    return result\n\ndef handler(event, context):\n    print( json.dumps(event, indent=2))\n\n    status = \"success\"\n    fragment = event[\"fragment\"]\n    templateParameterValues = event[\"params\"]\n    params = event[\"params\"]\n\n    resource_type = params.pop(\"ResourceType\")\n\n    return_type = \"StringList\"\n    if \"ReturnType\" in params :\n      return_type = params.pop(\"ReturnType\")\n\n    if resource_type == \"VpcId\":\n        fragment = find_vpc_id(params)\n    elif resource_type == \"SubnetIds\":\n        vpc_params = {}\n        subnet_params = {}\n        for k in params :\n            if k.startswith(\"VPC::\"):\n                vpc_params[k.replace(\"VPC::\", \"\")] = params[k]\n            else:\n                subnet_params[k] = params[k]\n        result = find_subnet_ids(find_vpc_id(vpc_params), subnet_params)\n        if return_type == 'String' :\n          fragment = \",\".join(result)\n        else :\n          fragment = result\n    elif resource_type == \"SecurityGroupIds\":\n        vpc_params = {}\n        sg_params = {}\n        for k in params :\n            if k.startswith(\"VPC::\"):\n                vpc_params[k.replace(\"VPC::\", \"\")] = params[k]\n            else:\n                sg_params[k] = params[k]\n        result = find_sg_ids(find_vpc_id(vpc_params), sg_params)\n        if return_type == 'String' :\n          fragment = \",\".join(result)\n        else :\n          fragment = result\n\n    return {\n        \"requestId\": event[\"requestId\"],\n        \"status\": status,\n        \"fragment\": fragment,\n    }\n"
                },
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": {
                            "Ref": "pProject"
                        }
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "pEnv"
                        }
                    },
                    {
                        "Key": "CreatedBy",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "mFindVPCResourceIds": {
            "Type": "AWS::CloudFormation::Macro",
            "Properties": {
                "Name": "FindVPCResourceIds",
                "Description": "Find supported VPC ResourceId(s) by tags",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "rFindVPCResourceIdsFunction",
                        "Arn"
                    ]
                }
            }
        }
    }
}
