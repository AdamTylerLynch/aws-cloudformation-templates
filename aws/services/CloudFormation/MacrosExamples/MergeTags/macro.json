{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This CloudFormation template is to provision the CloudFormation macro that merges local tags with common tags. 1. Lambda Execution role is created, if not provided 2. Lambda is created that implements the macro logic. 3. Macro is created that uses the Lambda\n",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Macro Configuration"
                    },
                    "Parameters": [
                        "pMacroLambdaExecRoleARN"
                    ]
                },
                {
                    "Label": {
                        "default": "Project Configuration"
                    },
                    "Parameters": [
                        "pBucketName",
                        "pProject",
                        "pEnv"
                    ]
                }
            ],
            "ParameterLabels": {
                "pMacroLambdaExecRoleARN": {
                    "default": "Macro Lambda execution role ARN"
                },
                "pBucketName": {
                    "default": "Amazon S3 bucket name"
                },
                "pProject": {
                    "default": "Project name"
                },
                "pEnv": {
                    "default": "Environment"
                }
            }
        }
    },
    "Parameters": {
        "pMacroLambdaExecRoleARN": {
            "Description": "If empty, new Macro Lambda execution role will be created",
            "Type": "String",
            "Default": ""
        },
        "pBucketName": {
            "Description": "The bucket where common tag file(s) are available.",
            "Type": "String"
        },
        "pProject": {
            "Description": "The project name e.g. myp.",
            "Type": "String",
            "Default": "myp"
        },
        "pEnv": {
            "Description": "The environment identifier e.g. dev",
            "Type": "String",
            "Default": "dev"
        }
    },
    "Conditions": {
        "cCreateMacroLambdaExecRole": {
            "Fn::Equals": [
                {
                    "Ref": "pMacroLambdaExecRoleARN"
                },
                ""
            ]
        }
    },
    "Resources": {
        "rMacroLambdaExecRole": {
            "Type": "AWS::IAM::Role",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W28",
                            "reason": "Role Name is used for identification, it is OK to replace"
                        },
                        {
                            "id": "W11",
                            "reason": "Only 'Describe*' is allowed"
                        }
                    ]
                }
            },
            "Properties": {
                "RoleName": {
                    "Fn::Sub": "cfn-macro-merge-tags-exec-role-${pProject}-${pEnv}"
                },
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "lambda-cw-access",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Sid": "LambdaAccessForCWLogGroup",
                                    "Effect": "Allow",
                                    "Action": "logs:CreateLogGroup",
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
                                    }
                                },
                                {
                                    "Sid": "LambdaAccessForCWLogs",
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": {
                                        "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "lambda-s3-access",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Sid": "ListObjectsInBucket",
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:ListBucket"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:s3:::${pBucketName}"
                                        }
                                    ]
                                },
                                {
                                    "Sid": "AllObjectActions",
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:${AWS::Partition}:s3:::${pBucketName}/*"
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": {
                            "Ref": "pProject"
                        }
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "pEnv"
                        }
                    },
                    {
                        "Key": "CreatedBy",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            },
            "Condition": "cCreateMacroLambdaExecRole"
        },
        "rMergeTagsFunction": {
            "Type": "AWS::Lambda::Function",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W89",
                            "reason": "VPC Access not required"
                        },
                        {
                            "id": "W58",
                            "reason": "Permission to write CloudWatch logs provided via execution role in security template"
                        }
                    ]
                }
            },
            "Properties": {
                "Description": "Merge local tags with common tags in a JSON file",
                "FunctionName": {
                    "Fn::Sub": "cfn-macro-merge-tags-${pProject}-${pEnv}"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::If": [
                        "cCreateMacroLambdaExecRole",
                        {
                            "Fn::GetAtt": [
                                "rMacroLambdaExecRole",
                                "Arn"
                            ]
                        },
                        {
                            "Ref": "pMacroLambdaExecRoleARN"
                        }
                    ]
                },
                "Timeout": 300,
                "Runtime": "python3.9",
                "ReservedConcurrentExecutions": 2,
                "Code": {
                    "ZipFile": {
                        "Fn::Sub": "import json\nimport boto3\n\ns3 = boto3.client('s3')\n\ndef handler(event, context):\n    print( json.dumps(event, indent=2))\n\n    response = {\n        \"requestId\": event[\"requestId\"],\n        \"status\": \"success\"\n    }\n\n    response[\"fragment\"] = []\n    params = event[\"params\"]\n    templateParams = event[\"templateParameterValues\"]\n\n    tags = {\n        \"Tags\" : []\n    }\n\n    try:\n        tagsFile = params.pop(\"TagsFile\")\n        pEnv = templateParams[\"pEnv\"]\n        s3Object = s3.get_object(Bucket=\"${pBucketName}\", Key=tagsFile)\n        strContent = s3Object['Body'].read().decode(\"utf-8\")\n        tags = json.loads(strContent)\n    except Exception as e:\n        print( str(e) )\n\n    # print( json.dumps(tags, indent=2))\n\n    for tag in tags[\"Tags\"] :\n        response[\"fragment\"].append( tag )\n\n    for k in params :\n        response[\"fragment\"].append(\n            {\n                \"Key\": k,\n                \"Value\": params[k]\n            }\n        )\n\n    # print( json.dumps(response, indent=2))\n    return response\n"
                    }
                },
                "Tags": [
                    {
                        "Key": "Project",
                        "Value": {
                            "Ref": "pProject"
                        }
                    },
                    {
                        "Key": "Env",
                        "Value": {
                            "Ref": "pEnv"
                        }
                    },
                    {
                        "Key": "CreatedBy",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "mMergeTags": {
            "Type": "AWS::CloudFormation::Macro",
            "Properties": {
                "Name": "MergeTags",
                "Description": "Merge local tags with common tags",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "rMergeTagsFunction",
                        "Arn"
                    ]
                }
            }
        }
    }
}
