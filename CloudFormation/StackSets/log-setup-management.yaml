AWSTemplateFormatVersion: '2010-09-09'

Transform: AWS::LanguageExtensions

Description: A central event bus rule and log group to collect CloudFormation logs from all target accounts

Parameters:

  OUID:
    Type: String
    Description: The Id of the Organization Unit. All accounts in this OU will be granted permissions to put events onto the default event bus in this account
    Default: ou-qxtx-vv0thlla

  CentralEventBusName:
    Type: String
    Default: central-cloudformation

Resources:

  CentralEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Description: A custom event bus in the central account to be used as a destination for events from a rule in target accounts
      Name: !Ref CentralEventBusName
      #KmsKeyIdentifier: !Ref CentralEventBusKey
      DeadLetterConfig:
        Arn: !GetAtt DeadLetterQueue.Arn

  CentralEventBusPolicy:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref CentralEventBus
      StatementId: CentralEventBusPolicyStatement
      Statement:
        Effect: Allow
        Principal: "*"
        Action: 'events:PutEvents'
        Resource: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/${CentralEventBusName}
          #Condition: 
          #StringEquals:
          #  "aws:PrincipalOrgID": !Ref OUID

              #  CentralEventBusKey:
              #    Type: AWS::KMS::Key
              #    DeletionPolicy: Delete
              #    UpdateReplacePolicy: Delete
              #    Properties:
              #      KeyPolicy:
              #        Statement:
              #          - Action:
              #              - kms:Create*
              #              - kms:Describe*
              #              - kms:Enable*
              #              - kms:List*
              #              - kms:Put*
              #              - kms:Update*
              #              - kms:Revoke*
              #              - kms:Disable*
              #              - kms:Get*
              #              - kms:Delete*
              #              - kms:ScheduleKeyDeletion
              #              - kms:CancelKeyDeletion
              #              - kms:GenerateDataKey
              #              - kms:TagResource
              #              - kms:UntagResource
              #            Effect: Allow
              #            Principal:
              #              AWS:
              #                - !Sub "arn:aws:iam::${AWS::AccountId}:role/Admin"
              #            Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/* 
              #          - Action:
              #              - kms:Encrypt
              #              - kms:Decrypt
              #              - kms:ReEncrypt
              #              - kms:GenerateDataKey*
              #              - kms:DescribeKey
              #            Effect: Allow
              #            Principal: "*"
              #            Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/* 
              #            Condition: 
              #              StringEquals:
              #                "aws:PrincipalOrgID": !Ref OUID
              #          - Action:
              #              - kms:Encrypt
              #              - kms:Decrypt
              #              - kms:ReEncrypt
              #              - kms:GenerateDataKey*
              #              - kms:DescribeKey
              #            Effect: Allow
              #            Principal: 
              #              Service: events.amazonaws.com
              #            Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/* 
              #          - Action:
              #              - kms:Encrypt
              #              - kms:Decrypt
              #              - kms:ReEncrypt
              #              - kms:GenerateDataKey*
              #              - kms:DescribeKey
              #            Effect: Allow
              #            Principal: 
              #              Service: logs.amazonaws.com
              #            Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/* 
              #      MultiRegion: true

  CentralEventLog:
    DependsOn: CentralEventBus
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupClass: STANDARD
      LogGroupName: central-cloudformation-logs

        #  CentralEventLogRole:
        #    Type: AWS::IAM::Role
        #    Properties:
        #      AssumeRolePolicyDocument:
        #        Version: '2012-10-17'
        #        Statement:
        #          - Effect: Allow
        #            Principal:
        #              Service: events.amazonaws.com
        #            Action: 'sts:AssumeRole'
        #
        #  CentralEventLogPolicy:
        #    Type: AWS::IAM::RolePolicy
        #    Properties:
        #      PolicyName: CentralLogGroupRolePolicy
        #      PolicyDocument:
        #        Version: '2012-10-17'
        #        Statement:
        #          - Effect: Allow
        #            Action:
        #              - 'logs:PutLogEvents'
        #              - 'logs:CreateLogStream'
        #            Resource: !GetAtt CentralEventLog.Arn
        #      RoleName: !Ref CentralEventLogRole
        #

  CentralEventLogPolicy:
    Type: AWS::Logs::ResourcePolicy
    Metadata:
      Comment: The PolicyDocument in this resource *must* be JSON, unlike the standard IAM resources that allow YAML. Also note that you have to put the policy here and not in a role referenced by AWS::Events::Rule.RoleArn, which is meant for cross-account scenarios.
    Properties:
      PolicyName: CentralEventLogResourcePolicy
      PolicyDocument: 
          !Sub |
            {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "delivery.logs.amazonaws.com",
                      "events.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "logs:PutLogEvents",
                    "logs:CreateLogStream"
                  ],
                  "Resource": "${CentralEventLog.Arn}"
                }
              ]
            }

   
  CentralEventRule:
    Type: AWS::Events::Rule
    DependsOn: 
      - CentralEventLog
    Metadata:
      Comment: We use an empty prefix here to capture all events forwarded from target accounts
      cfn-lint:
        config:
          ignore_checks:
            - W3005
    Properties:
      Name: CloudFormationLogs
      EventBusName: !Ref CentralEventBusName
      State: ENABLED
      EventPattern:
        source:
          - prefix: ""
      Targets:
        - Arn: !GetAtt CentralEventLog.Arn
          #RoleArn: !GetAtt CentralEventLogRole.Arn
          Id: CloudFormationLogsToCentralGroup
          DeadLetterConfig:
            Arn: !GetAtt DeadLetterQueue.Arn

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${CentralEventBusName}-DLQ

  TargetAccountLogging:
    Type: AWS::CloudFormation::StackSet
    DependsOn:
      - CentralEventRule
      - CentralEventLog
      - CentralEventLogPolicy
    Properties:
      TemplateBody: !Rain::Embed log-setup-target-accounts.yaml
      Capabilities:
        - CAPABILITY_IAM
      StackInstancesGroup:
        - DeploymentTargets:
            OrganizationalUnitIds:
              - !Ref OUID 
          Regions:
            - us-east-1
            - us-west-2
      Parameters:
        - ParameterKey: CentralEventBusArn
          ParameterValue: !GetAtt CentralEventBus.Arn
      PermissionModel: SERVICE_MANAGED
      Description: This stack set is part of a sample that demonstrates how to set up cross account logging. It configures logging resources in target accounts.
      OperationPreferences:
        FailureToleranceCount: 0
        MaxConcurrentCount: 2
        RegionConcurrencyType: PARALLEL
      AutoDeployment:
        Enabled: true
        RetainStacksOnAccountRemoval: true
      StackSetName: log-setup



