Parameters:
  LatestAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64

  InstanceType:
    Type: String
    Default: t3.medium

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: vscode-server-isg
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: vscode-server-isg
      VpcId: !Ref NetworkVPC

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: vscode-server-instance

  InstanceRolePolicy:
    Type: AWS::IAM::RolePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2messages:*
              - ssm:UpdateInstanceInformation
              - ssmmessages:*
            Effect: Allow
            Resource: '*'
        Version: "2012-10-17"
      PolicyName: InstanceRolePolicy
      RoleName: !Ref InstanceRole

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  Server:
    Type: AWS::EC2::Instance
    DependsOn:
      - InstanceRolePolicy
      - InstanceRole
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 128
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref LatestAMI
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt InstanceSecurityGroup.GroupId
      SubnetId: !GetAtt NetworkPublicSubnet1.SubnetId
      Tags:
        - Key: Name
          Value: vscode-server
      UserData: !Base64 |-
        #!/bin/bash

        set -eoux pipefail

        rpm --import https://packages.microsoft.com/keys/microsoft.asc
        sh -c 'echo -e "[code]
        name=Visual Studio Code
        baseurl=https://packages.microsoft.com/yumrepos/vscode
        enabled=1
        gpgcheck=1
        gpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'

        # https://github.com/amazonlinux/amazon-linux-2023/issues/397
        sleep 10

        yum install -y code git
        tee /etc/systemd/system/code-server.service <<EOF
        [Unit]
        Description=Start code server

        [Service]
        ExecStart=/usr/bin/code serve-web --port 8080 --host 0.0.0.0 --without-connection-token
        Restart=always
        Type=simple
        User=ec2-user

        [Install]
        WantedBy = multi-user.target
        EOF

        systemctl daemon-reload
        systemctl enable --now code-server

        # Install Node.js
        sudo -u ec2-user -i <<EOF
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
        source .bashrc
        nvm install 20.11.0
        nvm use 20.11.0
        EOF

  NetworkVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: vscode-server

  NetworkPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.0.0/18
      MapPublicIpOnLaunch: true
      VpcId: !Ref NetworkVPC
      Tags:
        - Key: Name
          Value: vscode-server-public-subnet-1
    Metadata:
      guard:
        SuppressedRules:
          - SUBNET_AUTO_ASSIGN_PUBLIC_IP_DISABLED

  NetworkPublicSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NetworkVPC
      Tags:
        - Key: Name
          Value: vscode-server-public-subnet-1-rt

  NetworkPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NetworkPublicSubnet1RouteTable
      SubnetId: !Ref NetworkPublicSubnet1

  NetworkPublicSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NetworkInternetGateway
      RouteTableId: !Ref NetworkPublicSubnet1RouteTable
    Metadata:
      guard:
        SuppressedRules:
          - NO_UNRESTRICTED_ROUTE_TO_IGW
    DependsOn:
      - NetworkVPCGW

  NetworkPublicSubnet1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: vscode-server-public-subnet-1-eip

  NetworkPublicSubnet1NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NetworkPublicSubnet1EIP.AllocationId
      SubnetId: !Ref NetworkPublicSubnet1
      Tags:
        - Key: Name
          Value: vscode-server-public-subnet-1-ngw
    DependsOn:
      - NetworkPublicSubnet1DefaultRoute
      - NetworkPublicSubnet1RouteTableAssociation

  NetworkPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.64.0/18
      MapPublicIpOnLaunch: true
      VpcId: !Ref NetworkVPC
      Tags:
        - Key: Name
          Value: vscode-server-public-subnet-2
    Metadata:
      guard:
        SuppressedRules:
          - SUBNET_AUTO_ASSIGN_PUBLIC_IP_DISABLED

  NetworkPublicSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NetworkVPC
      Tags:
        - Key: Name
          Value: vscode-server-public-subnet-2-rt

  NetworkPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NetworkPublicSubnet2RouteTable
      SubnetId: !Ref NetworkPublicSubnet2

  NetworkPublicSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NetworkInternetGateway
      RouteTableId: !Ref NetworkPublicSubnet2RouteTable
    Metadata:
      guard:
        SuppressedRules:
          - NO_UNRESTRICTED_ROUTE_TO_IGW
    DependsOn:
      - NetworkVPCGW

  NetworkPublicSubnet2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: vscode-server-public-subnet-eip

  NetworkPublicSubnet2NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NetworkPublicSubnet2EIP.AllocationId
      SubnetId: !Ref NetworkPublicSubnet2
      Tags:
        - Key: Name
          Value: vscode-server-public-subnet-ngw
    DependsOn:
      - NetworkPublicSubnet2DefaultRoute
      - NetworkPublicSubnet2RouteTableAssociation

  NetworkPrivateSubnet1Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.128.0/18
      MapPublicIpOnLaunch: false
      VpcId: !Ref NetworkVPC
      Tags:
        - Key: Name
          Value: vscode-server-private-subnet-1

  NetworkPrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NetworkVPC
      Tags:
        - Key: Name
          Value: vscode-server-private-subnet-1-rt

  NetworkPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NetworkPrivateSubnet1RouteTable
      SubnetId: !Ref NetworkPrivateSubnet1Subnet

  NetworkPrivateSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NetworkPublicSubnet1NATGateway
      RouteTableId: !Ref NetworkPrivateSubnet1RouteTable

  NetworkPrivateSubnet2Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: 10.0.192.0/18
      MapPublicIpOnLaunch: false
      VpcId: !Ref NetworkVPC
      Tags:
        - Key: Name
          Value: vscode-server-private-subnet-2

  NetworkPrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NetworkVPC
      Tags:
        - Key: Name
          Value: vscode-server-private-subnet-2-rt

  NetworkPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NetworkPrivateSubnet2RouteTable
      SubnetId: !Ref NetworkPrivateSubnet2Subnet

  NetworkPrivateSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NetworkPublicSubnet2NATGateway
      RouteTableId: !Ref NetworkPrivateSubnet2RouteTable

  NetworkInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: vscode-server

  NetworkVPCGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref NetworkInternetGateway
      VpcId: !Ref NetworkVPC

Outputs:
  Id:
    Description: Instance ID of the server. Use this to connect via SSM Session Manager
    Value: !Ref Server

  PrivateIP:
    Value: !GetAtt Server.PrivateIp

